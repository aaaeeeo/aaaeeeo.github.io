<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[LOSO's blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-11-11T04:42:53.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Zuoming Li]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Algorithm Week 12]]></title>
    <link href="http://yoursite.com/2015/11/10/55001-12/"/>
    <id>http://yoursite.com/2015/11/10/55001-12/</id>
    <published>2015-11-11T03:00:12.000Z</published>
    <updated>2015-11-11T04:42:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Review:_DFS">Review: DFS</h2><ul>
<li>input: G=(V,E), Directed or Undirected, in ADJ list format</li>
<li>output: <ul>
<li>d[v]: discovery time</li>
<li>f[v]:finishing time</li>
<li>p[v]:parebt of v on DFS tree</li>
</ul>
</li>
<li>time: O(V+E)<h4 id="Undirected_Graphs:">Undirected Graphs:</h4></li>
<li>tree edges</li>
<li>nontree edges (back edge)<h4 id="Directed_Graphs">Directed Graphs</h4>4 typtes of edge S :</li>
</ul>
<ol>
<li>Tree/forward Edge :  <code>d[u]&lt;d[v]&lt;f[v]&lt;f[u]</code></li>
<li>Back Edge : <code>d[v]&lt;d[u]&lt;f[u]&lt;f[v]</code></li>
<li>Cross Edge : <code>d[v]&lt;f[v]&lt;d[u]&lt;f[u]</code></li>
</ol>
<p>For tree, forward and cross edge (u,v):<br><code>f[v]&lt;f[u]      (\*)
For back edge (u,v):</code>f[u]&lt;f[v]      (**)`<br>So, back edges go from lower to higher finishing times f<br>can detect back edge and derermine if exists cycle in graph by compareing f times</p>
<h2 id="Directed_Acyclic_Graphs_(DAG)">Directed Acyclic Graphs (DAG)</h2><ul>
<li>DEF: let G=(V,E) be a directed graph H, G is acyclic if it contains no (directed) cycles.</li>
<li>Applicaton: <strong>Topological Sort</strong>  <h4 id="Topological_Sort">Topological Sort</h4></li>
<li><strong>Given</strong>: A Directed Acyclic Graph G=(V,E)</li>
<li><strong>Output</strong>: A list of G’s vertices $v_1,v_2,..,v_n$ such that all edges go from left to right<br>V = Set of tasks,  edge(u,v) means “do u before v”</li>
<li>no cycles, all edges have decreasing (high to low) finishing #’s by (*)<br>order vertices by decreasing finishinf time <em>f</em></li>
</ul>
<p><strong>TOPOLOGICAL-SORT(G)</strong><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">L</span> = empty <span class="keyword">list</span>                              <span class="comment">//O(V)</span></span><br><span class="line">DFS(<span class="keyword">G</span>) to compute f[v] <span class="keyword">for</span> all v <span class="keyword">in</span> <span class="keyword">G</span>       <span class="comment">//O(V+E)</span></span><br><span class="line">when vertex is finished, add it to <span class="keyword">L</span>        </span><br><span class="line">reverse <span class="keyword">list</span> <span class="keyword">L</span>                              <span class="comment">//O(V)</span></span><br></pre></td></tr></table></figure></p>
<p><strong>TIME:O(V+E)</strong></p>
<h4 id="Correctness">Correctness</h4><p>NTS: if (u,v) belong to E, then f[v]&lt;f[u]  </p>
<p><strong>proof:</strong> </p>
<blockquote>
<p>when explore (u,v) what are the color of u and v?<br>Is v gray white or black?</p>
</blockquote>
<h4 id="Source_Vertex">Source Vertex</h4><ul>
<li>vertex with no incoming edges<h4 id="Sink_Vertex">Sink Vertex</h4></li>
<li>vertex with no outcoming edges</li>
</ul>
<p><strong>1st vertex in topological ordering is source and last is sink</strong></p>
<h2 id="Strongly_Connected_Components">Strongly Connected Components</h2><ul>
<li>DEF: two vertices <em>u</em> and <em>v</em> of a directed graph <em>G</em> are strongly connected if there is a path from <em>u</em> to <em>v</em> and a path from <em>v</em> to <em>u</em></li>
<li>Partitions <em>V</em> in to disjoint sets of vertices called <strong>Strongly Connected Components(SCC)</strong></li>
<li>A SCC is a maximal set of strongly connected vertices<h4 id="Clever_(Tarjan):_ideas">Clever (Tarjan): ideas</h4></li>
</ul>
<ol>
<li>consider transpose of G=(V,E): $G^T=(V,E^T)$ where $E^T={(v,u): (u,v) \in E}$<br><strong>observation:</strong> G and $G^T$ have the same SCCs</li>
<li>Compdnent Graph<br>$G^{SCC}=(V^{SCC},E^{SCC})$<br>$V^{SCC}$: one vertex for each SCC in G<br>$E^{SCC}$: has an edge if there is anedge between SCCs in G</li>
</ol>
<p><strong><em>pic</em></strong></p>
<p>LEMMA: G^SCC is a DAG</p>
<p><strong>proof:</strong></p>
<blockquote>
<p>let X and X’ be distinct SCCs in G<br>let $u,v \in X$, $u’,v’ \in X’$, and suppose there is a path from u to u’ in G, then there cannot be a path from v’ to v in G</p>
</blockquote>
<h4 id="How_do_we_find_a_vertex_in_a_sink_SCC?">How do we find a vertex in a sink SCC?</h4><ul>
<li>The vertex with highest finishing time in a DFS of a directed G is in a scource SCC.</li>
<li>NOTE: The vertex with lowest finishing time might not be in a sink </li>
<li>Take $G^T$, a source in G is a sink in $G^T$ and a sink in G is a source in $G^T$</li>
</ul>
<p><strong>SCC(G)</strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">construct G^T</span><br><span class="line"><span class="function"><span class="title">DFS</span><span class="params">(G)</span></span> to compute f[u] <span class="keyword">for</span> all u <span class="keyword">in</span> V       <span class="comment">//O(V+E)</span></span><br><span class="line"><span class="function"><span class="title">DFS</span><span class="params">(G^T)</span></span> using reverse finishing <span class="attribute">order</span> of vertices <span class="keyword">in</span> <span class="function"><span class="title">DFS</span><span class="params">(G)</span></span>    <span class="comment">//O(V+E)</span></span><br><span class="line">output DFS trees from <span class="function"><span class="title">DFS</span><span class="params">(G^T)</span></span>  <span class="comment">//each tree in dfs forest is a SCC of G //O(V)</span></span><br></pre></td></tr></table></figure></p>
<p><strong>TIME: O(V+E)</strong></p>
<h2 id="Shortest_Path">Shortest Path</h2><h4 id="Weighted_Directed_Graphs">Weighted Directed Graphs</h4><ul>
<li>A weighted graph H is a directed together with a weight function<br>$G=(V,E,w)$</li>
<li>shortest path from u to v is a path of minimum weight from u to v</li>
<li>shortest path weight from u to v:<br>$\delta$(u,v)=min{ w(P) : P from u to v }<h4 id="When_do_shortest_paths_not_exist?">When do shortest paths not exist?</h4>Negative edge weights<br>Negative weight cycle:<br>$\delta$(u,v) = $-\infty$<br>if not reachable, $\delta$(u,v) = $+\infty$</li>
</ul>
<h3 id="Dijkstra’s_Algorithm">Dijkstra’s Algorithm</h3><ul>
<li>input: ( G, w, S)<ul>
<li>G=(V,E) Directed, ADJ </li>
<li>Weight function: w: E-&gt;R ( $\forall e \in E$ )( w(e)&gt;=0 )</li>
<li>S in V, Source vertex</li>
</ul>
</li>
<li>output: <ul>
<li>d[v]: distance (weight of a shorest path from S to V)<br>d[v] = $\delta$(S,V)</li>
<li>$\pi$[v]: parent of V on shorest paths tree</li>
</ul>
</li>
</ul>
<p><strong>DIJKSTRA(G, w, s)</strong><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">INITILIZE-SINGLE-SOURCE(<span class="keyword">G</span>,s)</span><br><span class="line">S = empty</span><br><span class="line">Q = V                  <span class="comment">//keyed by d[v]</span></span><br><span class="line"><span class="keyword">while</span> Q != empty</span><br><span class="line">    <span class="keyword">u</span> = EXTRACT-<span class="literal">MIN</span>(Q)</span><br><span class="line">    S = S join &#123;<span class="keyword">u</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> each vertex v <span class="keyword">in</span> Adj[<span class="keyword">u</span>]</span><br><span class="line">        RELAX(<span class="keyword">u</span>, v, w)</span><br></pre></td></tr></table></figure></p>
<p><strong>INITILIZE-SINGLE-SOURCE(G, s)</strong><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> vertex v <span class="operator">in</span> V</span><br><span class="line">    d[v] = infinity</span><br><span class="line">    <span class="constant">pi</span>[v] = NIL</span><br><span class="line">d[s]=<span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p><strong>RELAX(u, v, w)</strong><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">d</span>[v] &gt; <span class="keyword">d</span>[<span class="keyword">u</span>] + <span class="literal">w</span>(<span class="keyword">u</span>,v)</span><br><span class="line">    <span class="keyword">d</span>[v] = <span class="keyword">d</span>[<span class="keyword">u</span>] + <span class="literal">w</span>(<span class="keyword">u</span>,v)</span><br><span class="line">    pi[v] = <span class="keyword">u</span></span><br></pre></td></tr></table></figure></p>
<h5 id="correctness">correctness</h5><ul>
<li>NTS: d[v]=$\delta$(s,v) when alg terminates</li>
<li>LEMMA: when u is delected from Q and added to S, d[v]=$\delta$(s,v)</li>
<li>proof:<blockquote>
<p><strong>BASIS:</strong><br>At 1st iteraion, u=s, d[u]=d[s]=0, and $\delta$(s,s)=0 since no neg cycles<br><strong>INCUCTIVE STEP:</strong><br>suppose u has just been delected from Q, adn for all vertices w previously delected from Q, d[u]=$\delta$(s,u)<br>NTS: d[u]=$\delta$(s,u)<br>suppose, for contradiction, d[u]!=$\delta$(s,u)<br>we know that relax sets d[v] to a finite value, there is always evdience of a path of that weight, d[v]&gt;=$\delta$(s,v)<br>and so if d[u]!=$\delta$(s,u) then d[u]&gt;$\delta$(s,v)<br>Thus,there is a shortest path from s to u with weight &lt; d[u], call this path P.<br>let y be the 1st vertex on P that is not in S(y might be u),<br>and let x=$\pi$[y] be parent of y on P<br>Then x=$\pi$[y] $\in$ S, so by IH d[x]=$\delta$(s,x)</p>
</blockquote>
</li>
</ul>
<h4 id="Time_analysis">Time analysis</h4><p>Q: priority queue<br>|V| <em> cost of insert + |V| </em> cost of extract-min + O(E) * cost of decrease-key</p>
<ol>
<li><p>array for Q<br>cost of insert: O(1)<br>cost of extract-min: V-1<br>cost of decrease-key: O(1)<br><strong>overall: $O(V^2)$</strong></p>
</li>
<li><p>Binary Heap for Q<br>stored as an array<br>cost of insert: O(lgV)<br>cost of extract-min: O(lgV)<br>cost of decrease-key: O(lgV)<br><strong>overall: $O( (V+E)lgV )$</strong></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Review:_DFS">Review: DFS</h2><ul>
<li>input: G=(V,E), Directed or Undirected, in ADJ list format</li>
<li>output: <ul>
<li>d[v]: dis]]>
    </summary>
    
      <category term="55001" scheme="http://yoursite.com/tags/55001/"/>
    
      <category term="notes" scheme="http://yoursite.com/tags/notes/"/>
    
      <category term="notes" scheme="http://yoursite.com/categories/notes/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/11/02/hello-world/"/>
    <id>http://yoursite.com/2015/11/02/hello-world/</id>
    <published>2015-11-03T01:47:19.000Z</published>
    <updated>2015-11-03T01:47:19.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
